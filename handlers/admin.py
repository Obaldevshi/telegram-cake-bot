from aiogram import Router, F, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from models.database import get_all_orders, update_order_status

router = Router()

# === –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫–∏ –∑–Ω–∞—á–µ–Ω–∏–π ===
def translate_delivery(value):
    return "–î–æ—Å—Ç–∞–≤–∫–∞" if value == "delivery" else "–°–∞–º–æ–≤—ã–≤–æ–∑"

def translate_option(value):
    return {
        "none": "–ë–µ–∑ –¥–æ–ø. –ø–æ–∂–µ–ª–∞–Ω–∏–π",
        "with_note": "–° –ø–æ–∂–µ–ª–∞–Ω–∏–µ–º –Ω–∞ —Ç–æ—Ä—Ç–µ"
    }.get(value, value)

def translate_cake(value):
    return {
        "bento": "–ë–µ–Ω—Ç–æ —Ç–æ—Ä—Ç",
        "full": "–ü–æ–ª–Ω–æ—Ä–∞–∑–º–µ—Ä–Ω—ã–π —Ç–æ—Ä—Ç"
    }.get(value, value)

def clean_prefix(value):
    return value.split("_")[-1] if "_" in value else value

# === –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ ===
def register(dp, admin_ids):
    @router.message(F.text == "/orders")
    async def show_orders(msg: types.Message):
        if msg.from_user.id not in admin_ids:
            await msg.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
            return

        orders = await get_all_orders(status_filter="–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
        if not orders:
            await msg.answer("üì≠ –ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
            return

        for order in orders:
            await send_order_summary(msg.bot, order, msg.chat.id)

    @router.callback_query(F.data.startswith("admin_confirm_"))
    async def confirm_order(call: types.CallbackQuery):
        order_id = int(call.data.split("_")[-1])
        await update_order_status(order_id, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω ‚úÖ")
        await call.message.edit_text(f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.")

        orders = await get_all_orders(id_filter=order_id)
        if orders:
            uid = orders[0][1]  # user_id
            await call.bot.send_message(
                chat_id=uid,
                text=f"üéâ –í–∞—à –∑–∞–∫–∞–∑ #{order_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω! –ú—ã –Ω–∞—á–∞–ª–∏ –µ–≥–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ üßÅ"
            )

    @router.callback_query(F.data.startswith("admin_reject_"))
    async def reject_order(call: types.CallbackQuery):
        order_id = int(call.data.split("_")[-1])
        await update_order_status(order_id, "–û—Ç–∫–ª–æ–Ω—ë–Ω ‚ùå")
        await call.message.edit_text(f"‚ùå –ó–∞–∫–∞–∑ #{order_id} –æ—Ç–∫–ª–æ–Ω—ë–Ω.")

    dp.include_router(router)

# === –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ ===
async def send_order_summary(bot, order, chat_id):
    order_id, uid, uname, cake, fill, bis, size, qty, opt, delivery, addr, status, feedback, created = order
    text = f"""üì¶ –ó–∞–∫–∞–∑ #{order_id} –æ—Ç {uname}:
üç∞ –¢–æ—Ä—Ç: {translate_cake(cake)}
ü•Ñ –ù–∞—á–∏–Ω–∫–∞: {clean_prefix(fill)}
üç™ –ö–æ—Ä–∂–∏: {clean_prefix(bis)}
üìè –†–∞–∑–º–µ—Ä: {clean_prefix(size)}
üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {qty}
üéÅ –û–ø—Ü–∏–∏: {translate_option(opt)}
üöö –î–æ—Å—Ç–∞–≤–∫–∞: {translate_delivery(delivery)}
üè† –ê–¥—Ä–µ—Å: {addr if delivery == "delivery" else "–°–∞–º–æ–≤—ã–≤–æ–∑"}
üìÖ –°—Ç–∞—Ç—É—Å: {status}"""
    if feedback:
        text += f"\nüí¨ –ü–æ–∂–µ–ª–∞–Ω–∏–µ: {feedback}"

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"admin_confirm_{order_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"admin_reject_{order_id}")
        ]
    ])
    await bot.send_message(chat_id=chat_id, text=text, reply_markup=kb)
