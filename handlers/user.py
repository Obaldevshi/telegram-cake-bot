from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, Message, ReplyKeyboardMarkup, KeyboardButton
from models.database import add_order, save_feedback, get_all_orders
from keyboards.user import (
    get_delivery_kb, get_cake_kb, get_filling_kb, get_biscuit_kb,
    get_size_kb, get_quantity_kb, get_options_kb, get_new_order_kb
)
from utils.validators import is_valid_address
from handlers.admin import send_order_summary

ADMIN_CHAT_ID = 473088323  # —Å—é–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–∞—Ö

router = Router()

class OrderCake(StatesGroup):
    delivery = State()
    address = State()
    cake = State()
    filling = State()
    biscuit = State()
    size = State()
    quantity = State()
    options = State()
    wish = State()
    confirm = State()

@router.message(F.text.lower() == "/start")
async def start_order(msg: Message, state: FSMContext):
    await state.clear()
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üßÅ –ó–∞–∫–∞–∑–∞—Ç—å")]],
        resize_keyboard=True
    )
    await msg.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫—É—é!", reply_markup=kb)

@router.message(F.text == "üßÅ –ó–∞–∫–∞–∑–∞—Ç—å")
async def begin_order(msg: Message, state: FSMContext):
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è:", reply_markup=get_delivery_kb())
    await state.set_state(OrderCake.delivery)

@router.callback_query(OrderCake.delivery)
async def choose_delivery(call: types.CallbackQuery, state: FSMContext):
    await state.update_data(delivery=call.data)
    if call.data == "delivery":
        await call.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")
        await state.set_state(OrderCake.address)
    else:
        await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–æ—Ä—Ç–∞:", reply_markup=get_cake_kb())
        await state.set_state(OrderCake.cake)

@router.message(OrderCake.address)
async def enter_address(msg: Message, state: FSMContext):
    if not is_valid_address(msg.text):
        await msg.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å (–Ω–µ –º–µ–Ω–µ–µ 10 —Å–∏–º–≤–æ–ª–æ–≤).")
        return
    await state.update_data(address=msg.text)
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–æ—Ä—Ç–∞:", reply_markup=get_cake_kb())
    await state.set_state(OrderCake.cake)

@router.callback_query(OrderCake.cake)
async def choose_cake(call: types.CallbackQuery, state: FSMContext):
    await state.update_data(cake_type=call.data)
    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∏–Ω–∫—É:", reply_markup=get_filling_kb())
    await state.set_state(OrderCake.filling)

@router.callback_query(OrderCake.filling)
async def choose_filling(call: types.CallbackQuery, state: FSMContext):
    await state.update_data(filling=call.data)
    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ—Ä–∂–µ–π:", reply_markup=get_biscuit_kb())
    await state.set_state(OrderCake.biscuit)

@router.callback_query(OrderCake.biscuit)
async def choose_biscuit(call: types.CallbackQuery, state: FSMContext):
    await state.update_data(biscuit=call.data)
    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Ç–æ—Ä—Ç–∞:", reply_markup=get_size_kb())
    await state.set_state(OrderCake.size)

@router.callback_query(OrderCake.size)
async def choose_size(call: types.CallbackQuery, state: FSMContext):
    await state.update_data(size=call.data)
    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:", reply_markup=get_quantity_kb())
    await state.set_state(OrderCake.quantity)

@router.callback_query(OrderCake.quantity)
async def choose_quantity(call: types.CallbackQuery, state: FSMContext):
    await state.update_data(quantity=int(call.data))
    await call.message.edit_text("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏:", reply_markup=get_options_kb())
    await state.set_state(OrderCake.options)

@router.callback_query(OrderCake.options)
async def choose_options(call: types.CallbackQuery, state: FSMContext):
    await state.update_data(options=call.data)
    if call.data == "with_note":
        await call.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–µ–ª–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –Ω–∞–ø–∏—Å–∞–Ω–æ –Ω–∞ —Ç–æ—Ä—Ç–µ:")
        await state.set_state(OrderCake.wish)
    else:
        await call.message.edit_text("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑:", reply_markup=get_new_order_kb())
        await state.set_state(OrderCake.confirm)

@router.message(OrderCake.wish)
async def enter_wish(msg: Message, state: FSMContext):
    await state.update_data(feedback=msg.text)
    await msg.answer("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑:", reply_markup=get_new_order_kb())
    await state.set_state(OrderCake.confirm)

@router.callback_query(OrderCake.confirm, F.data == "confirm_order")
async def confirm_order(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    order = {
        "user_id": call.from_user.id,
        "user_name": call.from_user.full_name,
        **data,
        "address": data.get("address", "–°–∞–º–æ–≤—ã–≤–æ–∑"),
        "feedback": data.get("feedback", None),
        "status": "–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
    }
    await add_order(order)
    await call.message.edit_text("üéâ –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç! –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    await state.clear()

    # –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    orders = await get_all_orders(status_filter="–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
    if orders:
        await send_order_summary(call.bot, orders[0], ADMIN_CHAT_ID)

@router.callback_query(F.data == "cancel_order")
async def cancel_order(call: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await call.message.edit_text("‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –Ω–∞–∂–º–∏—Ç–µ /start")

@router.message(F.text.lower().startswith("–æ—Ü–µ–Ω–∫–∞:") | F.text.lower().startswith("–æ—Ç–∑—ã–≤:"))
async def handle_feedback(msg: Message, state: FSMContext):
    feedback = msg.text.strip()
    await save_feedback(user_id=msg.from_user.id, feedback=feedback)
    await msg.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! üíñ –ú—ã —Å—Ç–∞—Ä–∞–µ–º—Å—è –¥–ª—è –≤–∞—Å.")

@router.message(F.text.lower() == "–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")
async def ask_feedback(msg: Message, state: FSMContext):
    await msg.answer("üì¢ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ. –ù–∞—á–Ω–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ª–æ–≤–∞ '–û—Ç–∑—ã–≤:' –∏–ª–∏ '–û—Ü–µ–Ω–∫–∞:'")

def register(dp):
    dp.include_router(router)
